from pydantic import BaseModel, Field
from typing import List, Literal, Optional # Import Literal for specific string values

# Define the allowed quiz question types using Literal for strictness and clarity
QuizQuestionType = Literal["single_correct", "multiple_correct", "yes_no"]

class QuizQuestion(BaseModel):
    """
    Represents a single quiz question as generated by the LLM.
    This model defines the structure of each question item within the quiz response.
    """
    type: QuizQuestionType = Field(
        ...,
        description="The type of quiz question: 'single_correct', 'multiple_correct', or 'yes_no'."
    )
    question: str = Field(
        ...,
        min_length=5, # Ensure question text is not too short
        description="The text of the quiz question."
    )
    options: List[str] = Field(
        ...,
        min_length=2, # Minimum 2 options for Yes/No, 4 for MCQs
        description="A list of possible answer options for the question."
    )
    correct_answers: List[str] = Field(
        ...,
        min_length=1, # At least one correct answer
        description="A list of strings representing the correct answer(s). Each must be present verbatim in the 'options' list."
    )

class QuizResponse(BaseModel):
    """
    Represents the complete JSON response returned by the quiz generation endpoint.
    It contains a list of generated quiz questions.
    """
    questions: List[QuizQuestion] = Field(
        ...,
        description="A list of generated quiz questions, adhering to the specified types and counts."
    )
    # An optional field to convey specific errors or warnings from the generation process
    error: Optional[str] = Field(
        None,
        description="An optional error message providing details if quiz generation encountered issues (e.g., insufficient content)."
    )


class QuizRequest(BaseModel):
    """
    Represents the request body for the /quizzes/generate endpoint.
    Allows specifying quiz parameters such as file ID, total questions,
    specific question type counts, and language.
    """
    file_id: str = Field(
        ...,
        description="The unique identifier of the source content (e.g., a Markdown file generated from a PDF) for quiz generation."
    )
    total_questions: int = Field(
        5, # Default to 5 questions
        gt=0, # Must be greater than 0
        description="The total number of questions to generate for the quiz."
    )

    # Optional fields to specify exact counts for each question type.
    # A value of -1 or `None` means the type should be auto-distributed by the backend logic.
    num_single_correct: Optional[int] = Field(
        None, # Default to None, indicating auto-distribution
        ge=-1, # Allows -1 for auto-distribution, or non-negative integers for explicit counts
        description="Exact number of single-correct multiple-choice questions requested. Use -1 or omit for automatic distribution."
    )
    num_multiple_correct: Optional[int] = Field(
        None,
        ge=-1,
        description="Exact number of multiple-correct multiple-choice questions requested. Use -1 or omit for automatic distribution."
    )
    num_yes_no: Optional[int] = Field(
        None,
        ge=-1,
        description="Exact number of Yes/No questions requested. Use -1 or omit for automatic distribution."
    )

    language: str = Field(
        "en", # Default language is English
        description="The target language for the quiz questions (e.g., 'en' for English, 'es' for Spanish, 'fr' for French, 'ne' for Nepali). The LLM will attempt to generate questions in this language."
    )
    quizzes_type: str = Field(
        "mixed", # Default strategy is a mix of question types
        description="Overall quiz type strategy (e.g., 'mixed', 'focus_mcq'). This field can be used for higher-level control over question type distribution strategies."
    )

